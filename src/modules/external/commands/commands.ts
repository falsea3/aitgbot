import dotenv from 'dotenv';
import { Context, InlineKeyboard } from 'grammy';
import { UserService } from '../../user/user.service';
import { UserPromptService } from '../../user-prompt/user-prompt.service';
import { OpenAiService } from '../../../integration/openai/openai.service';
import { Prisma } from '@prisma/client';
import { AiModelService } from '../../ai-model/ai-model.service';

dotenv.config();

export async function handleStart(ctx: Context, userService: UserService) {
    const tgUser = ctx.from;
    let user = await userService.getOne(String(tgUser!.id));

    const refererId = typeof ctx.match === 'string' && ctx.match !== String(tgUser!.id)
        ? ctx.match
        : null;

    if (!user) {
        await userService.create({
            tgId: String(tgUser!.id),
            name: tgUser!.first_name,
            balance: new Prisma.Decimal(5),
            refererId,
        });

        await ctx.reply(`
–ü—Ä–∏–≤–µ—Ç, ${tgUser!.first_name}! üëã –Ø ‚Äî –±–æ—Ç-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç, –≥–æ—Ç–æ–≤ –ø–æ–º–æ—á—å –≤–∞–º —Å –≤–æ–ø—Ä–æ—Å–∞–º–∏ –∏ –∑–∞–¥–∞—á–∞–º–∏. 

–ú–æ–≥—É –ø–æ–¥—Å–∫–∞–∑–∞—Ç—å –ø–æ –ª—é–±–æ–π —Ç–µ–º–µ, –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã –∏–ª–∏ –ø—Ä–æ—Å—Ç–æ –ø–æ–±–æ–ª—Ç–∞—Ç—å! üòä

–ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ –º–Ω–µ, –∏ —è –ø–æ—Å—Ç–∞—Ä–∞—é—Å—å –ø–æ–º–æ—á—å. –ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ —É–∑–Ω–∞—Ç—å, –∫–∞–∫ —è –º–æ–≥—É –ø–æ–º–æ—á—å, –Ω–∞–ø–∏—à–∏—Ç–µ "–ß—Ç–æ —Ç—ã –º–æ–∂–µ—à—å?".

–¢–∞–∫–∂–µ, –µ—Å–ª–∏ —É –≤–∞—Å –µ—Å—Ç—å –∑–∞–ø—Ä–æ—Å—ã, –Ω–µ —Å—Ç–µ—Å–Ω—è–π—Ç–µ—Å—å –¥–µ–ª–∏—Ç—å—Å—è –∏–º–∏.
        `);

        if (refererId) {
            const amount = Number(process.env.REFERRAL_BONUS_AMOUNT || 50);
            const referer = await userService.getOne(refererId);

            if (referer) {
                await userService.processReferralBonus(refererId, String(tgUser!.id), amount);
                await ctx.api.sendMessage(
                    refererId,
                    `üéâ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${tgUser!.first_name} –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª—Å—è –ø–æ –≤–∞—à–µ–π —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–µ. –í–∞–º –Ω–∞—á–∏—Å–ª–µ–Ω–æ ${amount} —Ä—É–±–ª–µ–π!`
                );
                await ctx.reply(`üéâ –í—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª–∏—Å—å –ø–æ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${referer.name}. –í–∞–º –Ω–∞—á–∏—Å–ª–µ–Ω–æ ${amount} —Ä—É–±–ª–µ–π!`);
            }
        }

        return
    }

    if (user?.isBlocked) {
        return ctx.reply('–í–∞—à –∞–∫–∫–∞—É–Ω—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.');
    }

    if (+user?.balance <= 0) {
        return ctx.reply('–£ –≤–∞—Å –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å –¥–µ–Ω—å–≥–∏. –ü–æ–ø–æ–ª–Ω–∏—Ç–µ –±–∞–ª–∞–Ω—Å.');
    }

    await ctx.reply(`
–ü—Ä–∏–≤–µ—Ç, ${tgUser!.first_name}! üëã –Ø —Ä–∞–¥ —Å–Ω–æ–≤–∞ –≤–∞—Å –≤–∏–¥–µ—Ç—å. –ù–∞–ø–æ–º–Ω—é, —á—Ç–æ –º–æ–≥—É –ø–æ–º–æ—á—å –≤–∞–º —Å –≤–æ–ø—Ä–æ—Å–∞–º–∏, –∑–∞–¥–∞—á–∞–º–∏ –∏–ª–∏ –ø—Ä–æ—Å—Ç–æ –ø–æ–≥–æ–≤–æ—Ä–∏—Ç—å. –ù–∞–ø–∏—à–∏—Ç–µ –º–Ω–µ, –∏ —è –ø–æ—Å—Ç–∞—Ä–∞—é—Å—å –ø–æ–º–æ—á—å!
    `);
}

export async function handleBalance(ctx: Context, userService: UserService) {
    const tgUser = ctx.from;
    const user = await userService.getOne(String(tgUser!.id));

    if (!user) {
        return handleStart(ctx, userService);
    }

    await ctx.reply(`–í–∞—à –±–∞–ª–∞–Ω—Å: ${user.balance.toFixed(2)} —Ä—É–±.`);

    if (+user.balance <= 5) {
        return ctx.reply('–ë–∞–ª–∞–Ω—Å —Å–∫–æ—Ä–æ –∑–∞–∫–æ–Ω—á–∏—Ç—Å—è. –ü–æ–ø–æ–ª–Ω–∏—Ç–µ –±–∞–ª–∞–Ω—Å.');
    }

    if (+user.balance <= 0) {
        return ctx.reply('–£ –≤–∞—Å –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å –¥–µ–Ω—å–≥–∏. –ü–æ–ø–æ–ª–Ω–∏—Ç–µ –±–∞–ª–∞–Ω—Å.');
    }
}

export async function handleRef(ctx: Context, userService: UserService) {
    const tgUser = ctx.from;
    const user = await userService.getOne(String(tgUser!.id));

    if (!user) {
        return handleStart(ctx, userService);
    }

    await ctx.reply(`–í–∞—à–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞: https://t.me/${process.env.TELEGRAM_BOT_NAME}?start=${user.tgId} \n\n–ü—Ä–∏–≥–ª–∞—à–∞–∏ÃÜ—Ç–µ –¥—Ä—É–∑–µ–∏ÃÜ –∏ –ø–æ–ª—É—á–∞–∏ÃÜ—Ç–µ –±–æ–Ω—É—Å—ã!`);

}

export async function handleMessage(ctx: Context, userService: UserService, userPromptService: UserPromptService, OpenAiService: OpenAiService, aiModelService: AiModelService) {
    const message = ctx.message?.text;
    const tgUser = ctx.from;
    const user = await userService.getOne(String(tgUser!.id));

    if (!user) {
        return handleStart(ctx, userService);
    }

    let context = await userPromptService.getLast(user!.id, 3);


    if (+user.balance <= 0) {
        return ctx.reply('–£ –≤–∞—Å –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å –¥–µ–Ω—å–≥–∏. –ü–æ–ø–æ–ª–Ω–∏—Ç–µ –±–∞–ª–∞–Ω—Å.');
    }

    if (message && +user.balance > 0) {
        // const aiModel = await aiModelService.getOne(user.aiModelId);
        await userPromptService.create({ userId: user.id, prompt: message });
        const { text, cost, imageUrl } = await OpenAiService.getTextResponse(message, 2000, 'gpt-4o-mini', context);
        const newBalance = user.balance.add(-cost);

        if (imageUrl) {
            await ctx.replyWithPhoto(imageUrl) || await ctx.reply(text);
            // await ctx.reply(`–¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: ${newBalance.toFixed(2)} —Ä—É–±. –ü–æ—Ç—Ä–∞—á–µ–Ω–æ: ${cost.toFixed(2)} —Ä—É–±.`);
        } else {
            await ctx.reply(text);
            // await ctx.reply(`–¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: ${newBalance.toFixed(2)} —Ä—É–±. –ü–æ—Ç—Ä–∞—á–µ–Ω–æ: ${cost.toFixed(2)} —Ä—É–±.`);
        }

        await userService.updateBalance(String(tgUser!.id), -cost);
    }

}
export async function handlePrices(ctx: Context) {
    const keyboard = new InlineKeyboard().text('–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ', 'button_payment');
    const message = `
üí∞ *–°—Ç–æ–∏–º–æ—Å—Ç—å —É—Å–ª—É–≥ –≤ –±–æ—Ç–µ*:
- –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: *10 —Ä—É–±.*
- –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è: *–æ—Ç 1 –¥–æ 3 –∫–æ–ø–µ–µ–∫* (–∑–∞–≤–∏—Å–∏—Ç –æ—Ç –æ–±—ä–µ–º–∞ —Ç–µ–∫—Å—Ç–∞ –∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞).
    
üí° –ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –¥–ª—è –æ–ø–ª–∞—Ç—ã —ç—Ç–∏—Ö –¥–µ–π—Å—Ç–≤–∏–π. –°—Ç–æ–∏–º–æ—Å—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–π —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç—Å—è –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç–µ–∫—É—â–∏—Ö —Ç–∞—Ä–∏—Ñ–æ–≤ OpenAI.

‚ùó *–í–∞–∂–Ω–æ:*
- –°—Ä–µ–¥—Å—Ç–≤–∞, –ø–æ—Ç—Ä–∞—á–µ–Ω–Ω—ã–µ –Ω–∞ —É—Å–ª—É–≥–∏, –Ω–µ –ø–æ–¥–ª–µ–∂–∞—Ç –≤–æ–∑–≤—Ä–∞—Ç—É.
- –ü–µ—Ä–µ–¥ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ–º –±–∞–ª–∞–Ω—Å–∞ —É–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Å–æ–≥–ª–∞—Å–Ω—ã —Å —É—Å–ª–æ–≤–∏—è–º–∏.
    `;
    await ctx.reply(message, { parse_mode: "Markdown", reply_markup: keyboard });
    return
}